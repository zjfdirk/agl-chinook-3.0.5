From 9091a00fc8739677a96b4ad07f44b06be4abc8a1 Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Wed, 22 Feb 2017 16:58:02 +0300
Subject: [PATCH 05/17] mic: vop: rework mmap

This is preparation for use of VOP in non-MIC environment.

Memory that is exported to userspace via VOP device's mmap() method
now comes from vpdev->hw_ops->alloc_mappable(), and can be not suitable
for virt_to_phys() convertion. In particular, this is the case if memory
originates from dma_alloc_coherent() on ARM64 arhitecture.

To solve this, abstract mmap operation to new vpdev->hw_ops->mmap()
method.

If memory originates from dma_alloc_coherent(), mmap'ing it requires
usage of dma_mmap_coherent() API. That API has a restriction: it
can only map entire vma, it can't map part of vma. This imposes
a change in userspace ABI: entire area exported by VOP device can't be
any longer mapped with single mmap() call, need separate mmap() calls
for device page and for each virtqueue.

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
---
 Documentation/mic/mpssd/mpssd.c   | 35 ++++++++++++------
 drivers/misc/mic/bus/vop_bus.h    |  2 +
 drivers/misc/mic/host/mic_boot.c  | 12 ++++++
 drivers/misc/mic/vop/vop_vringh.c | 78 +++++++++++----------------------------
 4 files changed, 59 insertions(+), 68 deletions(-)

diff --git a/Documentation/mic/mpssd/mpssd.c b/Documentation/mic/mpssd/mpssd.c
index 07fc71f..6c0005e 100644
--- a/Documentation/mic/mpssd/mpssd.c
+++ b/Documentation/mic/mpssd/mpssd.c
@@ -435,15 +435,14 @@ static inline unsigned _vring_total_size(unsigned int num, unsigned long align)
  */
 static void *
 init_vr(struct mic_info *mic, int fd, int type,
-	struct mic_vring *vr0, struct mic_vring *vr1, int num_vq)
+	struct mic_vring *vr0, struct mic_vring *vr1)
 {
 	int vr_size;
 	char *va;
 
 	vr_size = PAGE_ALIGN(_vring_total_size(MIC_VRING_ENTRIES,
 					 MIC_VIRTIO_RING_ALIGN));
-	va = mmap(NULL, MIC_DEVICE_PAGE_END + vr_size * num_vq,
-		PROT_READ, MAP_SHARED, fd, 0);
+	va = mmap(NULL, MIC_DEVICE_PAGE_END, PROT_READ, MAP_SHARED, fd, 0);
 	if (MAP_FAILED == va) {
 		mpsslog("%s %s %d mmap failed errno %s\n",
 			mic->name, __func__, __LINE__,
@@ -451,7 +450,15 @@ init_vr(struct mic_info *mic, int fd, int type,
 		goto done;
 	}
 	set_dp(mic, type, va);
-	vr0->va = (struct mic_vring *)&va[MIC_DEVICE_PAGE_END];
+	va = mmap(NULL, vr_size, PROT_READ, MAP_SHARED,
+			fd, MIC_DEVICE_PAGE_END);
+	if (MAP_FAILED == va) {
+		mpsslog("%s %s %d mmap failed errno %s\n",
+			mic->name, __func__, __LINE__,
+			strerror(errno));
+		goto done;
+	}
+	vr0->va = (struct mic_vring *)va;
 	vr0->info = vr0->va +
 		_vring_info_offset(MIC_VRING_ENTRIES, MIC_VIRTIO_RING_ALIGN);
 	vring_init(&vr0->vr,
@@ -463,8 +470,15 @@ init_vr(struct mic_info *mic, int fd, int type,
 		le32toh(vr0->info->magic), MIC_MAGIC + type);
 	assert(le32toh(vr0->info->magic) == MIC_MAGIC + type);
 	if (vr1) {
-		vr1->va = (struct mic_vring *)
-			&va[MIC_DEVICE_PAGE_END + vr_size];
+		va = mmap(NULL, vr_size, PROT_READ, MAP_SHARED,
+				fd, MIC_DEVICE_PAGE_END + vr_size);
+		if (MAP_FAILED == va) {
+			mpsslog("%s %s %d mmap failed errno %s\n",
+				mic->name, __func__, __LINE__,
+				strerror(errno));
+			goto done;
+		}
+		vr1->va = (struct mic_vring *)va;
 		vr1->info = vr1->va + _vring_info_offset(MIC_VRING_ENTRIES,
 			MIC_VIRTIO_RING_ALIGN);
 		vring_init(&vr1->vr,
@@ -577,8 +591,7 @@ virtio_net(void *arg)
 	net_poll[NET_FD_TUN].events = POLLIN;
 
 	if (MAP_FAILED == init_vr(mic, mic->mic_net.virtio_net_fd,
-				  VIRTIO_ID_NET, &tx_vr, &rx_vr,
-		virtnet_dev_page.dd.num_vq)) {
+				  VIRTIO_ID_NET, &tx_vr, &rx_vr)) {
 		mpsslog("%s init_vr failed %s\n",
 			mic->name, strerror(errno));
 		goto done;
@@ -799,8 +812,7 @@ virtio_console(void *arg)
 	console_poll[VIRTIO_CONSOLE_FD].events = POLLIN;
 
 	if (MAP_FAILED == init_vr(mic, mic->mic_console.virtio_console_fd,
-				  VIRTIO_ID_CONSOLE, &tx_vr, &rx_vr,
-		virtcons_dev_page.dd.num_vq)) {
+				  VIRTIO_ID_CONSOLE, &tx_vr, &rx_vr)) {
 		mpsslog("%s init_vr failed %s\n",
 			mic->name, strerror(errno));
 		goto _close_pty;
@@ -1072,8 +1084,7 @@ start_virtblk(struct mic_info *mic, struct mic_vring *vring)
 	}
 	add_virtio_device(mic, &virtblk_dev_page.dd);
 	if (MAP_FAILED == init_vr(mic, mic->mic_virtblk.virtio_block_fd,
-				  VIRTIO_ID_BLOCK, vring, NULL,
-				  virtblk_dev_page.dd.num_vq)) {
+				  VIRTIO_ID_BLOCK, vring, NULL)) {
 		mpsslog("%s init_vr failed %s\n",
 			mic->name, strerror(errno));
 		return false;
diff --git a/drivers/misc/mic/bus/vop_bus.h b/drivers/misc/mic/bus/vop_bus.h
index f74b844..0837f09 100644
--- a/drivers/misc/mic/bus/vop_bus.h
+++ b/drivers/misc/mic/bus/vop_bus.h
@@ -118,6 +118,8 @@ struct vop_hw_ops {
 			dma_addr_t *dma);
 	void (*free_mappable)(struct vop_device *vpdev, size_t len,
 			void *addr, dma_addr_t dma);
+	int (*mmap)(struct vop_device *vpdev, struct vm_area_struct *vma,
+			void *addr);
 };
 
 struct vop_device *
diff --git a/drivers/misc/mic/host/mic_boot.c b/drivers/misc/mic/host/mic_boot.c
index 4fc2343..f262945 100644
--- a/drivers/misc/mic/host/mic_boot.c
+++ b/drivers/misc/mic/host/mic_boot.c
@@ -161,6 +161,17 @@ static void __mic_free_mappable(struct vop_device *vpdev, size_t size,
 	free_pages((unsigned long)addr, get_order(size));
 }
 
+static int __mic_mmap(struct vop_device *vpdev, struct vm_area_struct *vma,
+		void *addr)
+{
+	unsigned long offset = vma->vm_pgoff << PAGE_SHIFT;
+	unsigned long size = vma->vm_end - vma->vm_start;
+	unsigned long pa = virt_to_phys(addr);
+
+	return remap_pfn_range(vma, vma->vm_start + offset,
+			pa >> PAGE_SHIFT, size, vma->vm_page_prot);
+}
+
 static struct vop_hw_ops vop_hw_ops = {
 	.setup_dma = __mic_setup_dma,
 	.request_irq = __mic_request_irq,
@@ -174,6 +185,7 @@ static struct vop_hw_ops vop_hw_ops = {
 	.unmap = __mic_iounmap,
 	.alloc_mappable = __mic_alloc_mappable,
 	.free_mappable = __mic_free_mappable,
+	.mmap = __mic_mmap,
 };
 
 static inline struct mic_device *scdev_to_mdev(struct scif_hw_dev *scdev)
diff --git a/drivers/misc/mic/vop/vop_vringh.c b/drivers/misc/mic/vop/vop_vringh.c
index 3131256..4667929 100644
--- a/drivers/misc/mic/vop/vop_vringh.c
+++ b/drivers/misc/mic/vop/vop_vringh.c
@@ -1032,74 +1032,40 @@ done:
 	return mask;
 }
 
-static inline int
-vop_query_offset(struct vop_vdev *vdev, unsigned long offset,
-		 unsigned long *size, unsigned long *pa)
-{
-	struct vop_device *vpdev = vdev->vpdev;
-	unsigned long start = MIC_DP_SIZE;
-	int i;
-
-	/*
-	 * MMAP interface is as follows:
-	 * offset				region
-	 * 0x0					virtio device_page
-	 * 0x1000				first vring
-	 * 0x1000 + size of 1st vring		second vring
-	 * ....
-	 */
-	if (!offset) {
-		*pa = virt_to_phys(vpdev->hw_ops->get_dp(vpdev));
-		*size = MIC_DP_SIZE;
-		return 0;
-	}
-
-	for (i = 0; i < vdev->dd->num_vq; i++) {
-		struct vop_vringh *vvr = &vdev->vvr[i];
-
-		if (offset == start) {
-			*pa = virt_to_phys(vvr->vring.va);
-			*size = vvr->vring.len;
-			return 0;
-		}
-		start += vvr->vring.len;
-	}
-	return -1;
-}
-
 /*
  * Maps the device page and virtio rings to user space for readonly access.
  */
 static int vop_mmap(struct file *f, struct vm_area_struct *vma)
 {
 	struct vop_vdev *vdev = f->private_data;
+	struct vop_device *vpdev = vdev->vpdev;
 	unsigned long offset = vma->vm_pgoff << PAGE_SHIFT;
-	unsigned long pa, size = vma->vm_end - vma->vm_start, size_rem = size;
+	unsigned long size = vma->vm_end - vma->vm_start;
+	unsigned long start;
 	int i, err;
 
+	if (vma->vm_flags & VM_WRITE)
+		return -EACCES;
+
 	err = vop_vdev_inited(vdev);
 	if (err)
-		goto ret;
-	if (vma->vm_flags & VM_WRITE) {
-		err = -EACCES;
-		goto ret;
-	}
-	while (size_rem) {
-		i = vop_query_offset(vdev, offset, &size, &pa);
-		if (i < 0) {
-			err = -EINVAL;
-			goto ret;
-		}
-		err = remap_pfn_range(vma, vma->vm_start + offset,
-				      pa >> PAGE_SHIFT, size,
-				      vma->vm_page_prot);
-		if (err)
-			goto ret;
-		size_rem -= size;
-		offset += size;
+		return err;
+
+	/* Is it device page map? */
+	if (offset == 0 && size == MIC_DP_SIZE)
+		return vpdev->hw_ops->mmap(vpdev, vma,
+				vpdev->hw_ops->get_dp(vpdev));
+
+	/* Is it virtio ring map? */
+	for (i = 0, start = MIC_DP_SIZE; i < vdev->dd->num_vq; i++) {
+		struct vop_vringh *vvr = &vdev->vvr[i];
+		if (start == offset && size == vvr->vring.len)
+			return vpdev->hw_ops->mmap(vpdev, vma, vvr->vring.va);
+		start += vvr->vring.len;
 	}
-ret:
-	return err;
+
+	/* Unknown map */
+	return -EINVAL;
 }
 
 static const struct file_operations vop_fops = {
-- 
1.9.1

