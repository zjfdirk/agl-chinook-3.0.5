From 43fba630717376fe1b6bf15af09d26e815faf76a Mon Sep 17 00:00:00 2001
From: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
Date: Wed, 22 Feb 2017 16:58:02 +0300
Subject: [PATCH 13/17] mic: vop: refactor data transfer routines

This is preparation for use of VOP in non-MIC environment.

- Add new vop_hw_ops methods:
  - map_foreign() / unmap_foreign() - for host to map guest buffers not
    alloced via alloc_mappable() - i.e. for buffers pointed by virtio
    descriptors. Allow these to map only part of requested size, to
    handle buffers that cross hardware-enforced mapping alignment
    border.
  - dma_from_remote() / dma_to_remote() / dma_alignment() - for host to
    execute DMA transfers

- Move MIC dma code to mic/host/

- Reimplement vop_virtio_copy_{from,to}_user() on top of those methods

- For PIO transfer, to not do call copy_{from,to}_user() on i/o memory,
  instead copy to temporary buffer and use memcpy_{to,from}io()

- For DMA transfer, do not forget proper dma_sync_*() calls

Signed-off-by: Nikita Yushchenko <nikita.yoush@cogentembedded.com>
---
 drivers/misc/mic/bus/vop_bus.c     |   5 +-
 drivers/misc/mic/bus/vop_bus.h     |  35 ++--
 drivers/misc/mic/card/mic_device.c |   3 +-
 drivers/misc/mic/host/mic_boot.c   |  94 +++++++++-
 drivers/misc/mic/vop/vop_main.h    |   1 -
 drivers/misc/mic/vop/vop_vringh.c  | 365 ++++++++++++++++++-------------------
 6 files changed, 293 insertions(+), 210 deletions(-)

diff --git a/drivers/misc/mic/bus/vop_bus.c b/drivers/misc/mic/bus/vop_bus.c
index 17f824c..d1f37a7 100644
--- a/drivers/misc/mic/bus/vop_bus.c
+++ b/drivers/misc/mic/bus/vop_bus.c
@@ -140,8 +140,7 @@ static void vop_release_dev(struct device *d)
 
 struct vop_device *
 vop_register_device(struct device *pdev, int id,
-		    struct vop_hw_ops *hw_ops, u8 dnode, struct mic_mw *aper,
-		    struct dma_chan *chan)
+		    struct vop_hw_ops *hw_ops, u8 dnode)
 {
 	int ret;
 	struct vop_device *vdev;
@@ -157,8 +156,6 @@ vop_register_device(struct device *pdev, int id,
 	vdev->hw_ops = hw_ops;
 	vdev->dev.bus = &vop_bus;
 	vdev->dnode = dnode;
-	vdev->aper = aper;
-	vdev->dma_ch = chan;
 	vdev->index = dnode - 1;
 	dev_set_name(&vdev->dev, "vop-dev%u", vdev->index);
 	hw_ops->setup_dma(vdev);
diff --git a/drivers/misc/mic/bus/vop_bus.h b/drivers/misc/mic/bus/vop_bus.h
index d5d131f..6617e86 100644
--- a/drivers/misc/mic/bus/vop_bus.h
+++ b/drivers/misc/mic/bus/vop_bus.h
@@ -57,8 +57,6 @@ struct vop_device {
 	struct vop_device_id id;
 	struct device dev;
 	u8 dnode;
-	struct mic_mw *aper;
-	struct dma_chan *dma_ch;
 	int index;
 	bool use_dma_api;
 };
@@ -91,13 +89,17 @@ struct vop_driver {
  * @get_dp: Get access to the virtio device page used by the self
  *          node to add/remove/configure virtio devices.
  * @send_intr: Send an interrupt to the peer node on a specified doorbell.
- * @map: Map a remote buffer with the specified DMA address and length.
- * @unmap: Unmap a buffer previously mapped.
  * @alloc_mappable: Allocate memory suitable for mapping from remote peer
  *		    using ->map()
  * @free_mappable: Free memory allocated by ->alloc_mappable()
- * @dma_filter: The DMA filter function to use for obtaining access to
- *		a DMA channel on the peer node.
+ * @map: Map a remote buffer allocated by peer via ->alloc_mappable()
+ * @unmap: Unmap buffer mapped via ->map()
+ * @map_foreign: Try to map a remote buffer not allocated via ->alloc_mappable().
+ *		 Depending on hardware capabilities, this can map smaller size
+ *		 than requiested, and/or sleep waiting for availability of mapping
+ *		 window.
+ * @unmap_foreign: Unmap buffer mapped via ->map_foreign()
+ * @mmap: Map a local buffer allocated via ->Alloc_mappable() to userspace
  */
 struct vop_hw_ops {
 	void (*setup_dma)(struct vop_device *vpdev);
@@ -112,22 +114,33 @@ struct vop_hw_ops {
 	void __iomem * (*get_remote_dp)(struct vop_device *vpdev);
 	void * (*get_dp)(struct vop_device *vpdev);
 	void (*send_intr)(struct vop_device *vpdev, int db);
-	void __iomem * (*map)(struct vop_device *vpdev,
-				  dma_addr_t pa, size_t len);
-	void (*unmap)(struct vop_device *vpdev, void __iomem *va);
 
 	void * (*alloc_mappable)(struct vop_device *vpdev, size_t len,
 			dma_addr_t *dma);
 	void (*free_mappable)(struct vop_device *vpdev, size_t len,
 			void *addr, dma_addr_t dma);
+
+	void __iomem * (*map)(struct vop_device *vpdev,
+				  dma_addr_t pa, size_t len);
+	void (*unmap)(struct vop_device *vpdev, void __iomem *va);
+
+	void __iomem * (*map_foreign)(struct vop_device *vpdev,
+			dma_addr_t pa, size_t len, size_t *mapped_len);
+	void (*unmap_foreign)(struct vop_device *vopdev, void __iomem *va);
+
 	int (*mmap)(struct vop_device *vpdev, struct vm_area_struct *vma,
 			void *addr);
+
+	int (*dma_from_remote)(struct vop_device *vpdev,
+			dma_addr_t local_pa, dma_addr_t remote_pa, size_t len);
+	int (*dma_to_remote)(struct vop_device *vpdev,
+			dma_addr_t remote_pa, dma_addr_t local_pa, size_t len);
+	size_t (*dma_alignment)(struct vop_device *vpdev);
 };
 
 struct vop_device *
 vop_register_device(struct device *pdev, int id,
-		    struct vop_hw_ops *hw_ops, u8 dnode, struct mic_mw *aper,
-		    struct dma_chan *chan);
+		    struct vop_hw_ops *hw_ops, u8 dnode);
 void vop_unregister_device(struct vop_device *dev);
 int vop_register_driver(struct vop_driver *drv);
 void vop_unregister_driver(struct vop_driver *drv);
diff --git a/drivers/misc/mic/card/mic_device.c b/drivers/misc/mic/card/mic_device.c
index 8c92987..e812bbb 100644
--- a/drivers/misc/mic/card/mic_device.c
+++ b/drivers/misc/mic/card/mic_device.c
@@ -417,8 +417,7 @@ int __init mic_driver_init(struct mic_driver *mdrv)
 		goto irq_uninit;
 	}
 	mdrv->vpdev = vop_register_device(mdrv->dev, VOP_DEV_TRNSP,
-					  &vop_hw_ops, 0,
-					  NULL, mdrv->dma_ch[0]);
+					  &vop_hw_ops, 0);
 	if (IS_ERR(mdrv->vpdev)) {
 		rc = PTR_ERR(mdrv->vpdev);
 		goto dma_free;
diff --git a/drivers/misc/mic/host/mic_boot.c b/drivers/misc/mic/host/mic_boot.c
index f262945..b635f6c 100644
--- a/drivers/misc/mic/host/mic_boot.c
+++ b/drivers/misc/mic/host/mic_boot.c
@@ -127,6 +127,16 @@ static void __iomem *__mic_ioremap(struct vop_device *vpdev,
 	return mdev->aper.va + pa;
 }
 
+static void __iomem *__mic_ioremap_foreign(struct vop_device *vpdev,
+					   dma_addr_t pa, size_t len,
+					   size_t *mapped_len)
+{
+	struct mic_device *mdev = vpdev_to_mdev(&vpdev->dev);
+
+	*mapped_len = len;
+	return mdev->aper.va + pa;
+}
+
 static void __mic_iounmap(struct vop_device *vpdev, void __iomem *va)
 {
 	/* nothing to do */
@@ -172,6 +182,82 @@ static int __mic_mmap(struct vop_device *vpdev, struct vm_area_struct *vma,
 			pa >> PAGE_SHIFT, size, vma->vm_page_prot);
 }
 
+static int mic_sync_dma(struct mic_device *mdev, dma_addr_t dst, dma_addr_t src,
+			size_t len)
+{
+	int err = 0;
+	struct dma_device *ddev;
+	struct dma_async_tx_descriptor *tx;
+	struct dma_chan *dma_ch = mdev->dma_ch[0];
+
+	ddev = dma_ch->device;
+	tx = ddev->device_prep_dma_memcpy(dma_ch, dst, src, len,
+			DMA_PREP_FENCE);
+	if (!tx) {
+		err = -ENOMEM;
+		goto error;
+	} else {
+		dma_cookie_t cookie;
+
+		cookie = tx->tx_submit(tx);
+		if (dma_submit_error(cookie)) {
+			err = -ENOMEM;
+			goto error;
+		}
+		dma_async_issue_pending(dma_ch);
+		err = dma_sync_wait(dma_ch, cookie);
+	}
+error:
+	if (err)
+		dev_err(&mdev->pdev->dev, "%s %d err %d\n",
+			__func__, __LINE__, err);
+	return err;
+}
+
+static int __mic_dma_from_remote(struct vop_device *vpdev,
+		dma_addr_t local_pa, dma_addr_t remote_pa, size_t size)
+{
+	struct mic_device *mdev = vpdev_to_mdev(&vpdev->dev);
+	bool x200 = is_dma_copy_aligned(mdev->dma_ch[0]->device, 1, 1, 1);
+
+	/*
+	 * X100 uses DMA addresses as seen by the card so adding
+	 * the aperture base is not required for DMA. However x200
+	 * requires DMA addresses to be an offset into the bar so
+	 * add the aperture base for x200.
+	 */
+	if (x200)
+		remote_pa += mdev->aper.pa;
+
+	return mic_sync_dma(mdev, local_pa, remote_pa, size);
+
+}
+
+static int __mic_dma_to_remote(struct vop_device *vpdev,
+		dma_addr_t remote_pa, dma_addr_t local_pa, size_t size)
+{
+	struct mic_device *mdev = vpdev_to_mdev(&vpdev->dev);
+	bool x200 = is_dma_copy_aligned(mdev->dma_ch[0]->device, 1, 1, 1);
+
+	/*
+	 * X100 uses DMA addresses as seen by the card so adding
+	 * the aperture base is not required for DMA. However x200
+	 * requires DMA addresses to be an offset into the bar so
+	 * add the aperture base for x200.
+	 */
+	if (x200)
+		remote_pa += mdev->aper.pa;
+
+	return mic_sync_dma(mdev, remote_pa, local_pa, size);
+
+}
+
+static size_t __mic_dma_alignment(struct vop_device *vpdev)
+{
+	struct mic_device *mdev = vpdev_to_mdev(&vpdev->dev);
+	return 1 << mdev->dma_ch[0]->device->copy_align;
+}
+
 static struct vop_hw_ops vop_hw_ops = {
 	.setup_dma = __mic_setup_dma,
 	.request_irq = __mic_request_irq,
@@ -182,10 +268,15 @@ static struct vop_hw_ops vop_hw_ops = {
 	.get_remote_dp = __mic_get_remote_dp,
 	.send_intr = __mic_send_intr,
 	.map = __mic_ioremap,
+	.map_foreign = __mic_ioremap_foreign,
 	.unmap = __mic_iounmap,
+	.unmap_foreign = __mic_iounmap,
 	.alloc_mappable = __mic_alloc_mappable,
 	.free_mappable = __mic_free_mappable,
 	.mmap = __mic_mmap,
+	.dma_from_remote = __mic_dma_from_remote,
+	.dma_to_remote = __mic_dma_to_remote,
+	.dma_alignment = __mic_dma_alignment,
 };
 
 static inline struct mic_device *scdev_to_mdev(struct scif_hw_dev *scdev)
@@ -545,8 +636,7 @@ static int _mic_start(struct cosm_device *cdev, int id)
 	}
 
 	mdev->vpdev = vop_register_device(&mdev->pdev->dev, VOP_DEV_TRNSP,
-					  &vop_hw_ops, id + 1, &mdev->aper,
-					  mdev->dma_ch[0]);
+					  &vop_hw_ops, id + 1);
 	if (IS_ERR(mdev->vpdev)) {
 		rc = PTR_ERR(mdev->vpdev);
 		goto scif_remove;
diff --git a/drivers/misc/mic/vop/vop_main.h b/drivers/misc/mic/vop/vop_main.h
index ba47ec7..5b38271 100644
--- a/drivers/misc/mic/vop/vop_main.h
+++ b/drivers/misc/mic/vop/vop_main.h
@@ -71,7 +71,6 @@ struct vop_info {
 	struct mutex vop_mutex;
 	void __iomem *dp;
 	struct dentry *dbg;
-	struct dma_chan *dma_ch;
 	char name[16];
 	struct miscdevice miscdev;
 };
diff --git a/drivers/misc/mic/vop/vop_vringh.c b/drivers/misc/mic/vop/vop_vringh.c
index f3ae369..927d71d9 100644
--- a/drivers/misc/mic/vop/vop_vringh.c
+++ b/drivers/misc/mic/vop/vop_vringh.c
@@ -454,216 +454,202 @@ skip_hot_remove:
 	vdev->dd->type = -1;
 }
 
-/*
- * vop_sync_dma - Wrapper for synchronous DMAs.
- *
- * @dev - The address of the pointer to the device instance used
- * for DMA registration.
- * @dst - destination DMA address.
- * @src - source DMA address.
- * @len - size of the transfer.
- *
- * Return DMA_SUCCESS on success
- */
-static int vop_sync_dma(struct vop_vdev *vdev, dma_addr_t dst, dma_addr_t src,
-			size_t len)
-{
-	int err = 0;
-	struct dma_device *ddev;
-	struct dma_async_tx_descriptor *tx;
-	struct vop_info *vi = dev_get_drvdata(&vdev->vpdev->dev);
-	struct dma_chan *vop_ch = vi->dma_ch;
-
-	if (!vop_ch) {
-		err = -EBUSY;
-		goto error;
-	}
-	ddev = vop_ch->device;
-	tx = ddev->device_prep_dma_memcpy(vop_ch, dst, src, len,
-		DMA_PREP_FENCE);
-	if (!tx) {
-		err = -ENOMEM;
-		goto error;
-	} else {
-		dma_cookie_t cookie;
-
-		cookie = tx->tx_submit(tx);
-		if (dma_submit_error(cookie)) {
-			err = -ENOMEM;
-			goto error;
-		}
-		dma_async_issue_pending(vop_ch);
-		err = dma_sync_wait(vop_ch, cookie);
-	}
-error:
-	if (err)
-		dev_err(&vi->vpdev->dev, "%s %d err %d\n",
-			__func__, __LINE__, err);
-	return err;
-}
+#define VOP_MIN_DMA_SIZE	256
 
-#define VOP_USE_DMA true
+enum vop_transfer_direction {
+	VOP_REMOTE_TO_USER,
+	VOP_USER_TO_REMOTE,
+};
 
-/*
- * Initiates the copies across the PCIe bus from card memory to a user
- * space buffer. When transfers are done using DMA, source/destination
- * addresses and transfer length must follow the alignment requirements of
- * the MIC DMA engine.
- */
-static int vop_virtio_copy_to_user(void *src, void *dst, size_t len,
-				   void *context)
+static int vop_transfer(struct vop_vringh *vvr,
+			enum vop_transfer_direction dir,
+			void __user *user_buf,
+			dma_addr_t remote_addr,
+			size_t len)
 {
-	struct vop_vringh *vvr = context;
 	struct vop_vdev *vdev = vvr->vdev;
-	void __user *ubuf = (void __user *)dst;
-	u64 daddr = (u64) src;
 	struct vop_device *vpdev = vdev->vpdev;
-	void __iomem *dbuf = vpdev->hw_ops->map(vpdev, daddr, len);
-	struct vop_info *vi = dev_get_drvdata(&vpdev->dev);
-	size_t dma_alignment = 1 << vi->dma_ch->device->copy_align;
-	bool x200 = is_dma_copy_aligned(vi->dma_ch->device, 1, 1, 1);
-	size_t dma_offset, partlen;
+	bool try_dma;
+	void __iomem *remote_buf = NULL;
+	size_t offset, align, partlen, mapped_offset, mapped_size;
+	void *step_buf;
+	void __iomem *step_remote_buf;
+	size_t step_offset, step_len;
 	int err;
 
-	if (!VOP_USE_DMA) {
-		if (copy_to_user(ubuf, (void __force *)dbuf, len)) {
-			err = -EFAULT;
-			dev_err(vop_dev(vdev), "%s %d err %d\n",
-				__func__, __LINE__, err);
-			goto err;
+	/* DMA between userspace buffers and remote buffers is not currently
+	 * supported, intermediate buffer is used.
+	 *
+	 * Copy between userspace buffer and intermediate buffer is always
+	 * done on CPU.
+	 *
+	 * Copy between intermediate buffer and remote buffer can be partially
+	 * handled by DMA, if supported and block is large enough.
+	 *
+	 * Block is split into parts.
+	 * - if not trying DMA, just make each part not longer than size
+	 *   of intermediate buffer
+	 * - if trying DMA, also split head and tail with unaligned remote
+	 *   address into separate parts. No need to care about alignment of
+	 *   local userspace buffers since copy from/to these is handled by
+	 *   CPU
+	 *
+	 * If trying DMA and part is large enough, then try DMA.
+	 *
+	 * Otherwise, or if DMA fails, do PIO. For PIO, part copy can be
+	 * further split into steps, because vpdev->hw_ops->map_foreign()
+	 * can map less than requested.
+	 */
+
+	if (dir == VOP_REMOTE_TO_USER)
+		try_dma = vpdev->hw_ops->dma_from_remote &&
+			  vpdev->hw_ops->dma_alignment &&
+			  len >= VOP_MIN_DMA_SIZE;
+	else
+		try_dma = vpdev->hw_ops->dma_to_remote &&
+			  vpdev->hw_ops->dma_alignment &&
+			  len >= VOP_MIN_DMA_SIZE;
+
+	align = try_dma ? vpdev->hw_ops->dma_alignment(vpdev) : 1;
+
+	for (offset = 0; offset < len; offset += partlen) {
+
+		if (unlikely((remote_addr + offset) & (align - 1)))
+			partlen = align -
+				((remote_addr + offset) & (align - 1));
+		else {
+			partlen = len - offset;
+			if (try_dma && partlen >= VOP_MIN_DMA_SIZE)
+				partlen &= ~(align - 1);
 		}
-		vdev->in_bytes += len;
-		err = 0;
-		goto err;
-	}
 
-	dma_offset = daddr - round_down(daddr, dma_alignment);
-	daddr -= dma_offset;
-	len += dma_offset;
-	/*
-	 * X100 uses DMA addresses as seen by the card so adding
-	 * the aperture base is not required for DMA. However x200
-	 * requires DMA addresses to be an offset into the bar so
-	 * add the aperture base for x200.
-	 */
-	if (x200)
-		daddr += vpdev->aper->pa;
-	while (len) {
-		partlen = min_t(size_t, len, VOP_INT_DMA_BUF_SIZE);
-		err = vop_sync_dma(vdev, vvr->buf_da, daddr,
-				   ALIGN(partlen, dma_alignment));
-		if (err) {
-			dev_err(vop_dev(vdev), "%s %d err %d\n",
-				__func__, __LINE__, err);
-			goto err;
+		BUG_ON(VOP_MIN_DMA_SIZE & (align - 1));
+		partlen = min_t(size_t, partlen, VOP_INT_DMA_BUF_SIZE);
+
+		if (dir == VOP_USER_TO_REMOTE) {
+			if (copy_from_user(vvr->buf,
+					user_buf + offset, partlen)) {
+				err = -EFAULT;
+				goto out;
+			}
+			vdev->out_bytes += partlen;
 		}
-		if (copy_to_user(ubuf, vvr->buf + dma_offset,
-				 partlen - dma_offset)) {
-			err = -EFAULT;
-			dev_err(vop_dev(vdev), "%s %d err %d\n",
-				__func__, __LINE__, err);
-			goto err;
+
+		if (try_dma && partlen >= VOP_MIN_DMA_SIZE) {
+
+			if (dir == VOP_USER_TO_REMOTE) {
+				dma_sync_single_for_device(&vpdev->dev,
+						vvr->buf_da, partlen,
+						DMA_TO_DEVICE);
+				err = vpdev->hw_ops->dma_to_remote(vpdev,
+						remote_addr + offset,
+						vvr->buf_da,
+						partlen);
+				dma_sync_single_for_cpu(&vpdev->dev,
+						vvr->buf_da, partlen,
+						DMA_TO_DEVICE);
+				if (!err)
+					vdev->out_bytes_dma += partlen;
+			} else {
+				dma_sync_single_for_device(&vpdev->dev,
+						vvr->buf_da, partlen,
+						DMA_FROM_DEVICE);
+				err = vpdev->hw_ops->dma_from_remote(vpdev,
+						vvr->buf_da,
+						remote_addr + offset,
+						partlen);
+				dma_sync_single_for_cpu(&vpdev->dev,
+						vvr->buf_da, partlen,
+						DMA_FROM_DEVICE);
+				if (!err)
+					vdev->in_bytes_dma += partlen;
+			}
+
+			if (!err)
+				goto copied;
+			else
+				dev_warn_ratelimited(&vpdev->dev,
+					"DMA failed, falling back to PIO\n");
+		}
+
+		for (step_offset = 0; step_offset < partlen;
+						step_offset += step_len) {
+
+			if (remote_buf && mapped_offset + mapped_size <=
+						offset + step_offset) {
+				vpdev->hw_ops->unmap_foreign(vpdev,
+						remote_buf);
+				remote_buf = NULL;
+			}
+			if (!remote_buf) {
+				mapped_offset = offset + step_offset;
+				remote_buf = vpdev->hw_ops->map_foreign(vpdev,
+						remote_addr + mapped_offset,
+						len - mapped_offset,
+						&mapped_size);
+			}
+
+			step_len = min(partlen, (mapped_offset + mapped_size) -
+				       	(offset + step_offset));
+
+			step_remote_buf = remote_buf +
+					offset + step_offset - mapped_offset;
+			step_buf = vvr->buf + step_offset;
+
+			if (dir == VOP_USER_TO_REMOTE)
+				memcpy_toio(step_remote_buf, step_buf,
+						step_len);
+			else
+				memcpy_fromio(step_buf, step_remote_buf,
+						step_len);
+		}
+
+copied:
+		if (dir == VOP_REMOTE_TO_USER) {
+			if (copy_to_user(user_buf + offset,
+						vvr->buf, partlen)) {
+				err = -EFAULT;
+				goto out;
+			}
+			vdev->in_bytes += partlen;
 		}
-		daddr += partlen;
-		ubuf += partlen;
-		dbuf += partlen;
-		vdev->in_bytes_dma += partlen;
-		vdev->in_bytes += partlen;
-		len -= partlen;
-		dma_offset = 0;
 	}
+
 	err = 0;
-err:
-	vpdev->hw_ops->unmap(vpdev, dbuf);
-	dev_dbg(vop_dev(vdev),
-		"%s: ubuf %p dbuf %p len 0x%lx vr_idx 0x%x\n",
-		__func__, ubuf, dbuf, len, (int)(vvr - vdev->vvr));
+out:
+	if (remote_buf)
+		vpdev->hw_ops->unmap_foreign(vpdev, remote_buf);
 	return err;
 }
 
-/*
- * Initiates copies across the PCIe bus from a user space buffer to card
- * memory. When transfers are done using DMA, source/destination addresses
- * and transfer length must follow the alignment requirements of the MIC
- * DMA engine.
- */
-static int vop_virtio_copy_from_user(void *src, void *dst, size_t len,
-				     void *context)
+static int vop_virtio_copy_to_user(void *in_iov, void *data, size_t len,
+				   void *context)
 {
 	struct vop_vringh *vvr = context;
-	struct vop_vdev *vdev = vvr->vdev;
-	void __user *ubuf = (void __user *)dst;
-	u64 daddr = (u64) src;
-	struct vop_device *vpdev = vdev->vpdev;
-	void __iomem *dbuf = vpdev->hw_ops->map(vpdev, daddr, len);
-	struct vop_info *vi = dev_get_drvdata(&vdev->vpdev->dev);
-	size_t dma_alignment = 1 << vi->dma_ch->device->copy_align;
-	bool x200 = is_dma_copy_aligned(vi->dma_ch->device, 1, 1, 1);
-	size_t partlen;
-	bool dma = VOP_USE_DMA;
-	int err = 0;
-
-	if (daddr & (dma_alignment - 1)) {
-		vdev->tx_dst_unaligned += len;
-		dma = false;
-	} else if (len & (dma_alignment - 1)) {
-		vdev->tx_len_unaligned += len;
-		dma = false;
-	}
 
-	if (!dma)
-		goto memcpy;
+	dev_dbg(vop_dev(vvr->vdev),
+		"%s: remote %p user %p len 0x%lx vr_idx 0x%x\n",
+		__func__, in_iov, data, len, (int)(vvr - vvr->vdev->vvr));
 
-	/*
-	 * X100 uses DMA addresses as seen by the card so adding
-	 * the aperture base is not required for DMA. However x200
-	 * requires DMA addresses to be an offset into the bar so
-	 * add the aperture base for x200.
-	 */
-	if (x200)
-		daddr += vpdev->aper->pa;
-	while (len) {
-		partlen = min_t(size_t, len, VOP_INT_DMA_BUF_SIZE);
+	return vop_transfer(vvr, VOP_REMOTE_TO_USER,
+			    (void __user *)data,
+			    (dma_addr_t)(unsigned long)in_iov,
+			    len);
+}
 
-		if (copy_from_user(vvr->buf, ubuf, partlen)) {
-			err = -EFAULT;
-			dev_err(vop_dev(vdev), "%s %d err %d\n",
-				__func__, __LINE__, err);
-			goto err;
-		}
-		err = vop_sync_dma(vdev, daddr, vvr->buf_da,
-				   ALIGN(partlen, dma_alignment));
-		if (err) {
-			dev_err(vop_dev(vdev), "%s %d err %d\n",
-				__func__, __LINE__, err);
-			goto err;
-		}
-		daddr += partlen;
-		ubuf += partlen;
-		dbuf += partlen;
-		vdev->out_bytes_dma += partlen;
-		vdev->out_bytes += partlen;
-		len -= partlen;
-	}
-memcpy:
-	/*
-	 * We are copying to IO below and should ideally use something
-	 * like copy_from_user_toio(..) if it existed.
-	 */
-	if (copy_from_user((void __force *)dbuf, ubuf, len)) {
-		err = -EFAULT;
-		dev_err(vop_dev(vdev), "%s %d err %d\n",
-			__func__, __LINE__, err);
-		goto err;
-	}
-	vdev->out_bytes += len;
-	err = 0;
-err:
-	vpdev->hw_ops->unmap(vpdev, dbuf);
-	dev_dbg(vop_dev(vdev),
-		"%s: ubuf %p dbuf %p len 0x%lx vr_idx 0x%x\n",
-		__func__, ubuf, dbuf, len, (int)(vvr - vdev->vvr));
-	return err;
+static int vop_virtio_copy_from_user(void *in_iov, void *data, size_t len,
+				     void *context)
+{
+	struct vop_vringh *vvr = context;
+
+	dev_dbg(vop_dev(vvr->vdev),
+		"%s: user %p remote %p len 0x%lx vr_idx 0x%x\n",
+		__func__, data, in_iov, len, (int)(vvr - vvr->vdev->vvr));
+
+	return vop_transfer(vvr, VOP_USER_TO_REMOTE,
+			    (void __user *)data,
+			    (dma_addr_t)(unsigned long)in_iov,
+			    len);
 }
 
 /* Determine the total number of bytes consumed in a VRINGH KIOV */
@@ -1036,7 +1022,6 @@ int vop_host_init(struct vop_info *vi)
 	struct vop_device *vpdev = vi->vpdev;
 
 	INIT_LIST_HEAD(&vi->vdev_list);
-	vi->dma_ch = vpdev->dma_ch;
 	mdev = &vi->miscdev;
 	mdev->minor = MISC_DYNAMIC_MINOR;
 	snprintf(vi->name, sizeof(vi->name), "vop_virtio%d", vpdev->index);
-- 
1.9.1

